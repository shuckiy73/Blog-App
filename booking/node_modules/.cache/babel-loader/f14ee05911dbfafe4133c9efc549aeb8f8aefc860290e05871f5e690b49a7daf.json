{"ast":null,"code":"var _jsxFileName = \"K:\\\\ARENDA\\\\Booking_arenda\\\\booking\\\\src\\\\Components\\\\Authorization\\\\ProfilePage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport NavigateHeader from \"../General page/NavigateHeader\";\nimport jwt_decode from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProfilePage = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const API_USERDATA = \"http://127.0.0.1:8000/api/v1/user/data/\"; // Укажите правильный URL\n  const [tokens, setTokens] = useState({});\n  const [username, setUsername] = useState(\"\");\n  const [userData, setUserData] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Функция для декодирования JWT\n  const decodeToken = token => {\n    try {\n      return jwt_decode(token);\n    } catch (error) {\n      return null;\n    }\n  };\n\n  // Проверка наличия токена при загрузке страницы\n  useEffect(() => {\n    const authToken = sessionStorage.getItem(\"auth_token\");\n    if (authToken) {\n      const parsedToken = JSON.parse(authToken);\n      setTokens(parsedToken);\n      const decoded = decodeToken(parsedToken.refresh);\n      if (decoded) {\n        setUsername(decoded.username);\n      }\n    } else {\n      navigate(\"/login\"); // Перенаправление на страницу входа, если токена нет\n    }\n  }, [navigate]);\n\n  // Получение данных пользователя\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const response = await fetch(API_USERDATA, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"*/*\",\n            \"Authorization\": `Bearer ${tokens.access}`\n          },\n          body: JSON.stringify({\n            refresh_token: tokens.refresh\n          })\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setUserData(data);\n        } else {\n          setError(\"Ошибка при получении данных пользователя\");\n        }\n      } catch (error) {\n        setError(\"Произошла ошибка при подключении к серверу\");\n      }\n    };\n    if (tokens.access) {\n      fetchUserData();\n    }\n  }, [tokens]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavigateHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u041F\\u0440\\u043E\\u0444\\u0438\\u043B\\u044C \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"ID: \", id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u0418\\u043C\\u044F \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F: \", username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), userData && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u0414\\u0430\\u043D\\u043D\\u044B\\u0435 \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(userData, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_s(ProfilePage, \"j//oVVFl38wrNX35dC7+sz53iUM=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ProfilePage;\nexport default ProfilePage;\nvar _c;\n$RefreshReg$(_c, \"ProfilePage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","NavigateHeader","jwt_decode","jsxDEV","_jsxDEV","ProfilePage","_s","id","navigate","API_USERDATA","tokens","setTokens","username","setUsername","userData","setUserData","error","setError","decodeToken","token","authToken","sessionStorage","getItem","parsedToken","JSON","parse","decoded","refresh","fetchUserData","response","fetch","method","headers","access","body","stringify","refresh_token","ok","data","json","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["K:/ARENDA/Booking_arenda/booking/src/Components/Authorization/ProfilePage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport NavigateHeader from \"../General page/NavigateHeader\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nconst ProfilePage = () => {\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n    const API_USERDATA = \"http://127.0.0.1:8000/api/v1/user/data/\"; // Укажите правильный URL\r\n    const [tokens, setTokens] = useState({});\r\n    const [username, setUsername] = useState(\"\");\r\n    const [userData, setUserData] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    // Функция для декодирования JWT\r\n    const decodeToken = (token) => {\r\n        try {\r\n            return jwt_decode(token);\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    // Проверка наличия токена при загрузке страницы\r\n    useEffect(() => {\r\n        const authToken = sessionStorage.getItem(\"auth_token\");\r\n        if (authToken) {\r\n            const parsedToken = JSON.parse(authToken);\r\n            setTokens(parsedToken);\r\n\r\n            const decoded = decodeToken(parsedToken.refresh);\r\n            if (decoded) {\r\n                setUsername(decoded.username);\r\n            }\r\n        } else {\r\n            navigate(\"/login\"); // Перенаправление на страницу входа, если токена нет\r\n        }\r\n    }, [navigate]);\r\n\r\n    // Получение данных пользователя\r\n    useEffect(() => {\r\n        const fetchUserData = async () => {\r\n            try {\r\n                const response = await fetch(API_USERDATA, {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"Accept\": \"*/*\",\r\n                        \"Authorization\": `Bearer ${tokens.access}`,\r\n                    },\r\n                    body: JSON.stringify({\r\n                        refresh_token: tokens.refresh,\r\n                    }),\r\n                });\r\n\r\n                if (response.ok) {\r\n                    const data = await response.json();\r\n                    setUserData(data);\r\n                } else {\r\n                    setError(\"Ошибка при получении данных пользователя\");\r\n                }\r\n            } catch (error) {\r\n                setError(\"Произошла ошибка при подключении к серверу\");\r\n            }\r\n        };\r\n\r\n        if (tokens.access) {\r\n            fetchUserData();\r\n        }\r\n    }, [tokens]);\r\n\r\n    return (\r\n        <div>\r\n            <NavigateHeader />\r\n            <div>\r\n                <h1>Профиль пользователя</h1>\r\n                <p>ID: {id}</p>\r\n                <p>Имя пользователя: {username}</p>\r\n                {userData && (\r\n                    <div>\r\n                        <h2>Данные пользователя:</h2>\r\n                        <pre>{JSON.stringify(userData, null, 2)}</pre>\r\n                    </div>\r\n                )}\r\n                {error && <div className=\"alert alert-danger\">{error}</div>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfilePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}