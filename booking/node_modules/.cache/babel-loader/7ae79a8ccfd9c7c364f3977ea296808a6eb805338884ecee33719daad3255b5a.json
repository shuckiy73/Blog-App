{"ast":null,"code":"import React,{useEffect,useState,useCallback}from\"react\";import{useNavigate,useParams}from\"react-router-dom\";import NavigateHeader from\"../General page/NavigateHeader\";import{jwtDecode}from\"jwt-decode\";// Исправленный импорт\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ProfilePage=()=>{const{id}=useParams();const navigate=useNavigate();const API_USERDATA=\"http://127.0.0.1:8000/api/v1/user/data/\";// Укажите правильный URL\nconst[tokens,setTokens]=useState({});const[username,setUsername]=useState(\"\");const[userData,setUserData]=useState(null);const[error,setError]=useState(null);// Функция для декодирования JWT\nconst decodeToken=useCallback(token=>{try{return jwtDecode(token);// Используем jwtDecode\n}catch(error){return null;}},[]);// Проверка наличия токена при загрузке страницы\nuseEffect(()=>{const authToken=sessionStorage.getItem(\"auth_token\");if(authToken){const parsedToken=JSON.parse(authToken);setTokens(parsedToken);const decoded=decodeToken(parsedToken.refresh);if(decoded){setUsername(decoded.username);}}else{navigate(\"/login\");// Перенаправление на страницу входа, если токена нет\n}},[navigate,decodeToken]);// Получение данных пользователя\nconst fetchUserData=useCallback(async()=>{try{const response=await fetch(API_USERDATA,{method:\"POST\",headers:{\"Content-Type\":\"application/json\",\"Accept\":\"*/*\",\"Authorization\":`Bearer ${tokens.access}`},body:JSON.stringify({refresh_token:tokens.refresh})});if(response.ok){const data=await response.json();setUserData(data);}else{setError(\"Ошибка при получении данных пользователя\");}}catch(error){setError(\"Произошла ошибка при подключении к серверу\");}},[tokens]);useEffect(()=>{if(tokens.access){fetchUserData();}},[tokens,fetchUserData]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(NavigateHeader,{}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\u041F\\u0440\\u043E\\u0444\\u0438\\u043B\\u044C \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"ID: \",id]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u0418\\u043C\\u044F \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F: \",username]}),userData&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\u0414\\u0430\\u043D\\u043D\\u044B\\u0435 \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F:\"}),/*#__PURE__*/_jsx(\"pre\",{children:JSON.stringify(userData,null,2)})]}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"alert alert-danger\",children:error})]})]});};export default ProfilePage;","map":{"version":3,"names":["React","useEffect","useState","useCallback","useNavigate","useParams","NavigateHeader","jwtDecode","jsx","_jsx","jsxs","_jsxs","ProfilePage","id","navigate","API_USERDATA","tokens","setTokens","username","setUsername","userData","setUserData","error","setError","decodeToken","token","authToken","sessionStorage","getItem","parsedToken","JSON","parse","decoded","refresh","fetchUserData","response","fetch","method","headers","access","body","stringify","refresh_token","ok","data","json","children","className"],"sources":["K:/ARENDA/Booking_arenda/booking/src/Components/Authorization/ProfilePage.jsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport NavigateHeader from \"../General page/NavigateHeader\";\r\nimport { jwtDecode } from \"jwt-decode\"; // Исправленный импорт\r\n\r\nconst ProfilePage = () => {\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n    const API_USERDATA = \"http://127.0.0.1:8000/api/v1/user/data/\"; // Укажите правильный URL\r\n    const [tokens, setTokens] = useState({});\r\n    const [username, setUsername] = useState(\"\");\r\n    const [userData, setUserData] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    // Функция для декодирования JWT\r\n    const decodeToken = useCallback((token) => {\r\n        try {\r\n            return jwtDecode(token); // Используем jwtDecode\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }, []);\r\n\r\n    // Проверка наличия токена при загрузке страницы\r\n    useEffect(() => {\r\n        const authToken = sessionStorage.getItem(\"auth_token\");\r\n        if (authToken) {\r\n            const parsedToken = JSON.parse(authToken);\r\n            setTokens(parsedToken);\r\n\r\n            const decoded = decodeToken(parsedToken.refresh);\r\n            if (decoded) {\r\n                setUsername(decoded.username);\r\n            }\r\n        } else {\r\n            navigate(\"/login\"); // Перенаправление на страницу входа, если токена нет\r\n        }\r\n    }, [navigate, decodeToken]);\r\n\r\n    // Получение данных пользователя\r\n    const fetchUserData = useCallback(async () => {\r\n        try {\r\n            const response = await fetch(API_USERDATA, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Accept\": \"*/*\",\r\n                    \"Authorization\": `Bearer ${tokens.access}`,\r\n                },\r\n                body: JSON.stringify({\r\n                    refresh_token: tokens.refresh,\r\n                }),\r\n            });\r\n\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                setUserData(data);\r\n            } else {\r\n                setError(\"Ошибка при получении данных пользователя\");\r\n            }\r\n        } catch (error) {\r\n            setError(\"Произошла ошибка при подключении к серверу\");\r\n        }\r\n    }, [tokens]);\r\n\r\n    useEffect(() => {\r\n        if (tokens.access) {\r\n            fetchUserData();\r\n        }\r\n    }, [tokens, fetchUserData]);\r\n\r\n    return (\r\n        <div>\r\n            <NavigateHeader />\r\n            <div>\r\n                <h1>Профиль пользователя</h1>\r\n                <p>ID: {id}</p>\r\n                <p>Имя пользователя: {username}</p>\r\n                {userData && (\r\n                    <div>\r\n                        <h2>Данные пользователя:</h2>\r\n                        <pre>{JSON.stringify(userData, null, 2)}</pre>\r\n                    </div>\r\n                )}\r\n                {error && <div className=\"alert alert-danger\">{error}</div>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfilePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}